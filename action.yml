name: 'PSE Security Proxy'
description: 'Sets up PSE Security Proxy for secure package downloads'
author: 'InvisiRisk'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  api_url:
    description: 'URL of the InvisiRisk API (required for setup, optional for cleanup)'
    required: false
  app_token:
    description: 'Authentication token for the InvisiRisk API (required for setup, optional for cleanup)'
    required: false
  portal_url:
    description: 'URL of the InvisiRisk Portal (defaults to api_url if not provided)'
    required: false
    default: ''
  github_token:
    description: 'GitHub token to be passed to the PSE container for GitHub authentication'
    required: false
    default: ${{ github.token }}
  debug:
    description: 'Enable debug mode for verbose logging'
    required: false
    default: 'false'
  test_mode:
    description: 'Enable test mode to bypass API calls and container setup for testing. Use this when you want to test the action without actually running the PSE container.'
    required: false
    default: 'false'
  cleanup:
    description: 'Set to true to run cleanup instead of setup. This should be used at the end of your workflow.'
    required: false
    default: 'false'
  scan_id:
    description: 'Scan ID from the setup step. Optional even for cleanup - if not provided, a default value will be used.'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Check Environment
      shell: bash
      run: |
        # Create a helper function to check if running in a container
        is_container() {
          if [ -f "/.dockerenv" ] || [ -f "/run/.containerenv" ] || grep -q 'docker\|lxc' /proc/1/cgroup 2>/dev/null; then
            return 0  # True in bash
          else
            return 1  # False in bash
          fi
        }

        # Export the container status for other steps
        if is_container; then
          echo "Running in container environment"
          echo "PSE_IS_CONTAINER=true" >> $GITHUB_ENV
        else
          echo "Running in standard environment"
          echo "PSE_IS_CONTAINER=false" >> $GITHUB_ENV
        fi
    
    - name: Run Setup or Cleanup
      shell: bash
      run: |
        # Function to run a command with proper privileges
        exec_with_privileges() {
          if [ "$PSE_IS_CONTAINER" = "true" ]; then
            # In container, run directly
            "$@"
          else
            # On host, use sudo
            sudo "$@"
          fi
        }
        
        if [ "${{ inputs.cleanup }}" = "true" ]; then
          echo "Running PSE cleanup..."
          
          # Store action path for scripts to use
          echo "GITHUB_ACTION_PATH=${{ github.action_path }}" >> $GITHUB_ENV
          
          # Find and execute cleanup script
          SCRIPT_PATH="${{ github.action_path }}/cleanup.sh"
          
          # Try alternative paths if the primary path doesn't work
          if [ ! -f "$SCRIPT_PATH" ]; then
            # Try to find the script in common locations
            for alt_path in "$GITHUB_WORKSPACE/cleanup.sh" "$PWD/cleanup.sh" "$(dirname "$0")/cleanup.sh" "/github/workspace/cleanup.sh"; do
              if [ -f "$alt_path" ]; then
                SCRIPT_PATH="$alt_path"
                break
              fi
            done
            
            # Last resort: search for the script
            if [ ! -f "$SCRIPT_PATH" ]; then
              for search_dir in "$GITHUB_WORKSPACE" "$GITHUB_ACTION_PATH" "$PWD" "/github/workspace"; do
                if [ -d "$search_dir" ]; then
                  found_script=$(find "$search_dir" -name "cleanup.sh" -type f -print -quit 2>/dev/null)
                  if [ -n "$found_script" ]; then
                    SCRIPT_PATH="$found_script"
                    break
                  fi
                fi
              done
            fi
          fi
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Found cleanup script at: $SCRIPT_PATH"
            chmod +x "$SCRIPT_PATH" || true
            "$SCRIPT_PATH"
          else
            echo "ERROR: Could not find cleanup script at $SCRIPT_PATH"
            exit 1
          fi
        else
          echo "Running PSE setup..."
          
          # Store action path for scripts to use
          echo "GITHUB_ACTION_PATH=${{ github.action_path }}" >> $GITHUB_ENV
          
          # Store environment variables for cleanup step
          echo "PSE_API_URL=${{ inputs.api_url }}" >> $GITHUB_ENV
          echo "PSE_APP_TOKEN=${{ inputs.app_token }}" >> $GITHUB_ENV
          echo "PSE_PORTAL_URL=${{ inputs.portal_url || inputs.api_url }}" >> $GITHUB_ENV
          
          # Find and execute setup script
          SCRIPT_PATH="${{ github.action_path }}/setup.sh"
          
          # Try alternative paths if the primary path doesn't work
          if [ ! -f "$SCRIPT_PATH" ]; then
            # Try to find the script in common locations
            for alt_path in "$GITHUB_WORKSPACE/setup.sh" "$PWD/setup.sh" "$(dirname "$0")/setup.sh" "/github/workspace/setup.sh"; do
              if [ -f "$alt_path" ]; then
                SCRIPT_PATH="$alt_path"
                break
              fi
            done
            
            # Last resort: search for the script
            if [ ! -f "$SCRIPT_PATH" ]; then
              for search_dir in "$GITHUB_WORKSPACE" "$GITHUB_ACTION_PATH" "$PWD" "/github/workspace"; do
                if [ -d "$search_dir" ]; then
                  found_script=$(find "$search_dir" -name "setup.sh" -type f -print -quit 2>/dev/null)
                  if [ -n "$found_script" ]; then
                    SCRIPT_PATH="$found_script"
                    break
                  fi
                fi
              done
            fi
          fi
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Found setup script at: $SCRIPT_PATH"
            chmod +x "$SCRIPT_PATH" || true
            "$SCRIPT_PATH"
          else
            echo "ERROR: Could not find setup script at $SCRIPT_PATH"
            exit 1
          fi
        fi
      env:
        API_URL: ${{ inputs.cleanup == 'true' && env.PSE_API_URL || inputs.api_url }}
        APP_TOKEN: ${{ inputs.cleanup == 'true' && env.PSE_APP_TOKEN || inputs.app_token }}
        PORTAL_URL: ${{ inputs.cleanup == 'true' && env.PSE_PORTAL_URL || inputs.portal_url || inputs.api_url }}
        SCAN_ID: ${{ inputs.scan_id || github.run_id }}
        DEBUG: ${{ inputs.debug }}
        TEST_MODE: ${{ inputs.test_mode }}
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
        PSE_IS_CONTAINER: ${{ env.PSE_IS_CONTAINER }}
