name: 'PSE Security Proxy'
description: 'Sets up PSE Security Proxy for secure package downloads'
author: 'InvisiRisk'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  api_url:
    description: 'URL of the InvisiRisk API (required for setup, optional for cleanup)'
    required: false
  app_token:
    description: 'Authentication token for the InvisiRisk API (required for setup, optional for cleanup)'
    required: false
  portal_url:
    description: 'URL of the InvisiRisk Portal (defaults to api_url if not provided)'
    required: false
    default: ''
  github_token:
    description: 'GitHub token to be passed to the PSE container for GitHub authentication'
    required: false
    default: ${{ github.token }}
  debug:
    description: 'Enable debug mode for verbose logging'
    required: false
    default: 'false'
  test_mode:
    description: 'Enable test mode to bypass API calls and container setup for testing. Use this when you want to test the action without actually running the PSE container.'
    required: false
    default: 'false'
  cleanup:
    description: 'Set to true to run cleanup instead of setup. This should be used at the end of your workflow.'
    required: false
    default: 'false'
  mode:
    description: 'The operation mode: "pse_only" sets up only the PSE container, "build_only" configures the build environment. Default is "full" which does both.'
    required: false
    default: 'full'
  proxy_ip:
    description: 'IP address of the PSE proxy container when using "build_only" mode. Required when mode is "build_only".'
    required: false
    default: ''
  scan_id:
    description: 'Scan ID from the setup step. Optional even for cleanup - if not provided, a default value will be used.'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Run Setup or Cleanup
      shell: bash
      run: |
        if [ "${{ inputs.cleanup }}" = "true" ]; then
          echo "Running PSE cleanup..."
          ${{ github.action_path }}/cleanup.sh
        else
          echo "Running PSE setup in ${{ inputs.mode }} mode..."
          
          # Create scan in InvisiRisk Portal only in pse_only or full mode
          if [ "${{ inputs.mode }}" = "pse_only" ] || [ "${{ inputs.mode }}" = "full" ]; then
            echo "Creating scan in InvisiRisk Portal..."
            echo "API URL: ${{ inputs.api_url }}/utilityapi/v1/scan"
            
            # Test API connectivity first
            echo "Testing API connectivity..."
            CONN_TEST=$(curl -L -s -o /dev/null -w "%{http_code}" "${{ inputs.api_url }}")
            echo "API connection test result: $CONN_TEST"
            
            # Dump full curl command with token for debugging (private repo only)
            echo "DEBUG - FULL CURL COMMAND:"
            echo "curl -L -v -X POST \"${{ inputs.api_url }}/utilityapi/v1/scan\" \
              -H \"Content-Type: application/json\" \
              -H \"User-Agent: pse-action-container\" \
              -d \"{\\\"api_key\\\": \\\"${{ inputs.app_token }}\\\"}\""
            
            # More verbose curl for debugging
            SCAN_RESPONSE=$(curl -L -v -X POST "${{ inputs.api_url }}/utilityapi/v1/scan" \
              -H "Content-Type: application/json" \
              -H "User-Agent: pse-action-container" \
              -d "{\"api_key\": \"${{ inputs.app_token }}\"}" \
              2>&1 | tee /tmp/curl_debug.log)
            
            # Extract response body from verbose output
            RESPONSE_BODY=$(cat /tmp/curl_debug.log | grep -v "^*" | grep -v "^>" | grep -v "^<" | grep -v "^}" | tail -n 1)
            
            # Print raw response for debugging 
            echo "API Response (raw): $RESPONSE_BODY"
            echo "Full debug log saved to /tmp/curl_debug.log"
            
            # Make a second attempt with simpler approach if the first one failed
            if [ -z "$RESPONSE_BODY" ] || echo "$RESPONSE_BODY" | grep -q "detail.*Not Found"; then
              echo "First attempt failed with 'Not Found'. Trying alternative endpoint..."
              SCAN_RESPONSE=$(curl -L -s -X POST "${{ inputs.api_url }}/api/v1/scan" \
                -H "Content-Type: application/json" \
                -H "User-Agent: pse-action-container" \
                -d "{\"api_key\": \"${{ inputs.app_token }}\"}")
              
              echo "Alternate API Response (masked): $(echo "$SCAN_RESPONSE" | sed 's/"api_key":"[^"]*"/"api_key":"***"/g')"
              RESPONSE_BODY="$SCAN_RESPONSE"
            fi
            
            # Check if the response contains an error message
            if echo "$RESPONSE_BODY" | grep -q '"error"'; then
              echo "Error received from API: $(echo "$RESPONSE_BODY" | grep -o '"error":"[^"]*' | cut -d'"' -f4)"
              exit 1
            fi
            
            # Define parse_json function
            parse_json() {
              local json="$1"
              local field="$2"
              
              # Check if jq is available
              if command -v jq >/dev/null 2>&1; then
                # Use jq for more reliable JSON parsing
                value=$(echo "$json" | jq -r ".$field" 2>/dev/null)
                if [ "$value" != "null" ] && [ -n "$value" ]; then
                  echo "$value"
                  return 0
                fi
              fi
              
              # Fallback to grep-based extraction
              value=$(echo "$json" | grep -o "\"$field\":[[:space:]]*\"[^\"]*\"" | cut -d'"' -f4)
              echo "$value"
            }
            
            # Function to parse nested JSON
            parse_nested_json() {
              local json="$1"
              local parent_field="$2"
              local child_field="$3"
              
              # Check if jq is available
              if command -v jq >/dev/null 2>&1; then
                # Use jq for more reliable JSON parsing
                value=$(echo "$json" | jq -r ".$parent_field.$child_field" 2>/dev/null)
                if [ "$value" != "null" ] && [ -n "$value" ]; then
                  echo "$value"
                  return 0
                fi
              fi
              
              # Fallback to extracting parent object first, then child field
              parent_obj=$(echo "$json" | grep -o "\"$parent_field\":[[:space:]]*{[^}]*}" | sed "s/\"$parent_field\":[[:space:]]*//")
              if [ -n "$parent_obj" ]; then
                value=$(echo "$parent_obj" | grep -o "\"$child_field\":[[:space:]]*\"[^\"]*\"" | cut -d'"' -f4)
                echo "$value"
              fi
            }
            
            # Try to extract scan_id using parse_json function
            SCAN_ID=$(parse_json "$RESPONSE_BODY" "scan_id")
            
            # If first pattern fails, try alternative field name
            if [ -z "$SCAN_ID" ]; then
              SCAN_ID=$(parse_json "$RESPONSE_BODY" "id")
            fi
            
            # If still not found, try to extract from data field
            if [ -z "$SCAN_ID" ]; then
              # Try to extract nested field
              SCAN_ID=$(parse_nested_json "$RESPONSE_BODY" "data" "id")
            fi
            
            # If none of the standard patterns worked, try a direct grep
            if [ -z "$SCAN_ID" ]; then
              echo "Standard JSON extraction failed, trying direct pattern matching..."
              # Look for any UUID pattern in the response
              SCAN_ID=$(echo "$RESPONSE_BODY" | grep -o '[0-9a-f]\{8\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{12\}' | head -1)
            fi
            
            # If we still don't have a scan ID, try to use a fallback
            if [ -z "$SCAN_ID" ] && [ "${{ inputs.scan_id }}" != "" ]; then
              echo "Warning: Could not extract scan ID from API response. Using provided scan_id parameter as fallback."
              SCAN_ID="${{ inputs.scan_id }}"
            elif [ -z "$SCAN_ID" ]; then
              # Generate a UUID as last resort
              if command -v uuidgen >/dev/null 2>&1; then
                SCAN_ID=$(uuidgen)
                echo "Warning: Generated a random UUID as scan ID: $SCAN_ID"
              else
                # Fallback UUID generation using /proc/sys/kernel/random/uuid if available
                if [ -f /proc/sys/kernel/random/uuid ]; then
                  SCAN_ID=$(cat /proc/sys/kernel/random/uuid)
                  echo "Warning: Generated a random UUID as scan ID: $SCAN_ID"
                else
                  echo "Error: Failed to create scan object or extract scan ID from response, and no fallback available"
                  exit 1
                fi
              fi
            fi
            
            echo "Scan object created with ID: $SCAN_ID"
            echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
            echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.mode }}" = "build_only" ]; then
            # In build_only mode, attempt to use the provided scan_id
            if [ -n "${{ inputs.scan_id }}" ]; then
              echo "Using provided scan_id: ${{ inputs.scan_id }}"
              echo "SCAN_ID=${{ inputs.scan_id }}" >> $GITHUB_ENV
            else
              # Generate a UUID if scan_id is not provided
              echo "No scan_id provided for build_only mode, generating a random UUID"
              if command -v uuidgen >/dev/null 2>&1; then
                SCAN_ID=$(uuidgen)
              elif [ -f /proc/sys/kernel/random/uuid ]; then
                SCAN_ID=$(cat /proc/sys/kernel/random/uuid)
              else
                # Fallback to date-based ID if UUID generation is not available
                SCAN_ID="build-$(date +%Y%m%d-%H%M%S)"
              fi
              echo "Generated scan_id: $SCAN_ID"
              echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
              echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Install jq if needed
          if ! command -v jq >/dev/null 2>&1; then
            echo "Installing jq for JSON parsing..."
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -qq && sudo apt-get install -y jq
            elif command -v apk >/dev/null 2>&1; then
              apk add --no-cache jq
            elif command -v yum >/dev/null 2>&1; then
              sudo yum install -y jq
            else
              echo "Could not install jq, falling back to grep-based parsing"
            fi
          else
            echo "jq is already installed"
          fi
          
          # Run setup script with appropriate mode
          ${{ github.action_path }}/setup.sh
        fi
      env:
        API_URL: ${{ inputs.cleanup == 'true' && env.PSE_API_URL || inputs.api_url }}
        APP_TOKEN: ${{ inputs.cleanup == 'true' && env.PSE_APP_TOKEN || inputs.app_token }}
        PORTAL_URL: ${{ inputs.cleanup == 'true' && env.PSE_PORTAL_URL || inputs.portal_url || inputs.api_url }}
        SCAN_ID: ${{ inputs.cleanup == 'true' && (inputs.scan_id || env.SCAN_ID) || env.SCAN_ID }}
        DEBUG: ${{ inputs.debug }}
        TEST_MODE: ${{ inputs.test_mode }}
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
        MODE: ${{ inputs.mode }}
        PROXY_IP: ${{ inputs.proxy_ip }}
