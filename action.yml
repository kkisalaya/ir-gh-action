name: 'PSE Security Proxy'
description: 'Sets up PSE Security Proxy for secure package downloads'
author: 'InvisiRisk'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  api_url:
    description: 'URL of the InvisiRisk API'
    required: true
  app_token:
    description: 'Authentication token for the InvisiRisk API'
    required: true
  portal_url:
    description: 'URL of the InvisiRisk Portal'
    required: true
  debug:
    description: 'Enable debug mode for verbose logging'
    required: false
    default: 'false'
  test_mode:
    description: 'Enable test mode to bypass API calls and container setup for testing. Use this when you want to test the action without actually running the PSE container.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Setup PSE Proxy
      shell: bash
      run: ${{ github.action_path }}/setup.sh
      env:
        API_URL: ${{ inputs.api_url }}
        APP_TOKEN: ${{ inputs.app_token }}
        PORTAL_URL: ${{ inputs.portal_url }}
        DEBUG: ${{ inputs.debug }}
        TEST_MODE: ${{ inputs.test_mode }}
        GITHUB_TOKEN: ${{ github.token }}

    - name: Register Cleanup
      shell: bash
      run: |
        # Register this action's path for cleanup
        echo "PSE_ACTION_PATH=${{ github.action_path }}" >> $GITHUB_ENV
        # Register scan ID for cleanup
        if [ -n "$SCAN_ID" ]; then
          echo "PSE_SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
        fi

    - name: Cleanup PSE Proxy
      if: always()
      shell: bash
      run: |
        # This step will run at the end of the job
        # We need to use always() to ensure it runs even if previous steps fail
        ${{ github.action_path }}/cleanup.sh
      env:
        API_URL: ${{ inputs.api_url }}
        APP_TOKEN: ${{ inputs.app_token }}
        PORTAL_URL: ${{ inputs.portal_url }}
        SCAN_ID: ${{ env.PSE_SCAN_ID }}
        DEBUG: ${{ inputs.debug }}
        TEST_MODE: ${{ inputs.test_mode }}
        GITHUB_TOKEN: ${{ github.token }}
